digraph {
method -> methodDeclaration;
methodDeclaration -> keywordMethod;
keywordMethod -> keyword;
keyword -> identifier;
identifier -> UNDERSCORE_ALPHA;
UNDERSCORE_ALPHA -> ALPHA;
identifier -> UNDERSCORE_ALPHANUMERIC;
UNDERSCORE_ALPHANUMERIC -> UNDERSCORE_ALPHA;
UNDERSCORE_ALPHANUMERIC -> DIGIT;
keywordMethod -> variable;
variable -> identifier;
methodDeclaration -> unaryMethod;
unaryMethod -> identifier;
methodDeclaration -> binaryMethod;
binaryMethod -> binary;
binary -> BINARYSYMBOL;
binaryMethod -> variable;
method -> methodSequence;
methodSequence -> PERIOD;
methodSequence -> pragmas;
pragmas -> pragma;
pragma -> pragmaMessage;
pragmaMessage -> keywordPragma;
keywordPragma -> keyword;
keywordPragma -> arrayItem;
arrayItem -> literal;
literal -> numberLiteral;
numberLiteral -> DIGITS;
DIGITS -> DIGIT;
numberLiteral -> PERIOD;
literal -> stringLiteral;
literal -> charLiteral;
literal -> arrayLiteral;
arrayLiteral -> arrayItem;
literal -> byteLiteral;
byteLiteral -> numberLiteral;
literal -> symbolLiteral;
symbolLiteral -> symbol;
symbol -> unary;
unary -> identifier;
symbol -> binary;
symbol -> multiword;
multiword -> keyword;
symbol -> stringLiteral;
literal -> NIL;
literal -> TRUE;
literal -> FALSE;
arrayItem -> symbolLiteralArray;
symbolLiteralArray -> symbol;
arrayItem -> arrayLiteralArray;
arrayLiteralArray -> arrayItem;
arrayItem -> byteLiteralArray;
byteLiteralArray -> arrayItem;
pragmaMessage -> unaryPragma;
unaryPragma -> identifier;
pragmaMessage -> binaryPragma;
binaryPragma -> binary;
binaryPragma -> arrayItem;
methodSequence -> temporaries;
temporaries -> variable;
methodSequence -> statements;
statements -> expression;
expression -> assignment;
assignment -> variable;
assignment -> ASSIGN;
expression -> cascadeExpression;
cascadeExpression -> keywordExpression;
keywordExpression -> binaryExpression;
binaryExpression -> unaryExpression;
unaryExpression -> primary;
primary -> literal;
primary -> variable;
primary -> block;
block -> blockBody;
blockBody -> blockArguments;
blockArguments -> blockArgument;
blockArgument -> variable;
blockBody -> sequence;
sequence -> temporaries;
sequence -> PERIOD;
sequence -> statements;
primary -> parens;
parens -> expression;
primary -> array;
array -> expression;
array -> PERIOD;
unaryExpression -> unaryMessage;
unaryMessage -> unary;
binaryExpression -> binaryMessage;
binaryMessage -> binary;
binaryMessage -> unaryExpression;
keywordExpression -> keywordMessage;
keywordMessage -> keyword;
keywordMessage -> binaryExpression;
cascadeExpression -> cascadeMessage;
cascadeMessage -> message;
message -> keywordMessage;
message -> binaryMessage;
message -> unaryMessage;
statements -> PERIOD;
statements -> statements;
statements -> return;
return -> RETURN;
return -> expression;
}